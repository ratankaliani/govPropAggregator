# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Proposal(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, platform: str=None, title: str=None, end_time: int=None, tx_hash: str=None, status: str=None, link: str=None):  # noqa: E501
        """Proposal - a model defined in Swagger

        :param id: The id of this Proposal.  # noqa: E501
        :type id: int
        :param platform: The platform of this Proposal.  # noqa: E501
        :type platform: str
        :param title: The title of this Proposal.  # noqa: E501
        :type title: str
        :param end_time: The end_time of this Proposal.  # noqa: E501
        :type end_time: int
        :param tx_hash: The tx_hash of this Proposal.  # noqa: E501
        :type tx_hash: str
        :param status: The status of this Proposal.  # noqa: E501
        :type status: str
        :param link: The link of this Proposal.  # noqa: E501
        :type link: str
        """
        self.swagger_types = {
            'id': int,
            'platform': str,
            'title': str,
            'end_time': int,
            'tx_hash': str,
            'status': str,
            'link': str
        }

        self.attribute_map = {
            'id': 'id',
            'platform': 'platform',
            'title': 'title',
            'end_time': 'endTime',
            'tx_hash': 'txHash',
            'status': 'status',
            'link': 'link'
        }

        self._id = id
        self._platform = platform
        self._title = title
        self._end_time = end_time
        self._tx_hash = tx_hash
        self._status = status
        self._link = link

    @classmethod
    def from_dict(cls, dikt) -> 'Proposal':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Proposal of this Proposal.  # noqa: E501
        :rtype: Proposal
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Proposal.


        :return: The id of this Proposal.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Proposal.


        :param id: The id of this Proposal.
        :type id: int
        """

        self._id = id

    @property
    def platform(self) -> str:
        """Gets the platform of this Proposal.


        :return: The platform of this Proposal.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform: str):
        """Sets the platform of this Proposal.


        :param platform: The platform of this Proposal.
        :type platform: str
        """

        self._platform = platform

    @property
    def title(self) -> str:
        """Gets the title of this Proposal.


        :return: The title of this Proposal.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Proposal.


        :param title: The title of this Proposal.
        :type title: str
        """

        self._title = title

    @property
    def end_time(self) -> int:
        """Gets the end_time of this Proposal.


        :return: The end_time of this Proposal.
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: int):
        """Sets the end_time of this Proposal.


        :param end_time: The end_time of this Proposal.
        :type end_time: int
        """

        self._end_time = end_time

    @property
    def tx_hash(self) -> str:
        """Gets the tx_hash of this Proposal.


        :return: The tx_hash of this Proposal.
        :rtype: str
        """
        return self._tx_hash

    @tx_hash.setter
    def tx_hash(self, tx_hash: str):
        """Sets the tx_hash of this Proposal.


        :param tx_hash: The tx_hash of this Proposal.
        :type tx_hash: str
        """

        self._tx_hash = tx_hash

    @property
    def status(self) -> str:
        """Gets the status of this Proposal.

        active, canceled, defeated, pending, queued, succeeded  # noqa: E501

        :return: The status of this Proposal.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Proposal.

        active, canceled, defeated, pending, queued, succeeded  # noqa: E501

        :param status: The status of this Proposal.
        :type status: str
        """

        self._status = status

    @property
    def link(self) -> str:
        """Gets the link of this Proposal.


        :return: The link of this Proposal.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link: str):
        """Sets the link of this Proposal.


        :param link: The link of this Proposal.
        :type link: str
        """

        self._link = link
